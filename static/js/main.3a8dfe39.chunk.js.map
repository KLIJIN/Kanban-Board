{"version":3,"sources":["components/card/Card.js","components/Button/Button.js","assets/add.svg","assets/clear.svg","components/AddForm/AddForm.js","components/Panel/Panel.js","containers/Panels.js","reducers/actions.js","App.js","reportWebVitals.js","reducers/reducer.js","reducers/RootReducer.js","store.js","index.js"],"names":["Card","children","cardIndex","columnIndex","index","draggableId","provided","snapshot","className","isDragging","ref","innerRef","draggableProps","dragHandleProps","Button","onAdd","onClick","AddForm","isEmptyPanel","addColumn","onAddCards","useState","showForm","setShowForm","text","setText","textareaRef","useRef","useEffect","current","focus","rows","onChange","e","target","value","placeholder","src","clearSvg","alt","bind","addSvg","Panel","title","cards","AddCards","removeColumn","droppableId","droppableProps","map","card","connect","state","console","log","Columns","Column","dispatch","name","type","payload","addCard","reorderCardsDel","source","destination","onDragEnd","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","removed","filter","_","String","cardsCopy","splice","TargetColumn","Number","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getState","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a8dfe39.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Draggable} from \"react-beautiful-dnd\"\r\n\r\nconst Card = ({children,  cardIndex, columnIndex}) => {\r\n    return(\r\n        <Draggable index={cardIndex} draggableId={`${columnIndex}-${cardIndex}`} >\r\n           {(provided, snapshot) => (\r\n        <div\r\n          className={`Card ${snapshot.isDragging && \"dragging\"}`}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n         </Draggable>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react'\r\n\r\nconst Button = ({children,  onAdd }) => {\r\n    return(\r\n        <button className=\"button\"  onClick = {onAdd}   >\r\n           {children}\r\n        </button>\r\n    );\r\n}\r\n\r\n// Button.propTypes  = {\r\n//     children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired\r\n//   };\r\n\r\n  export default Button;","export default __webpack_public_path__ + \"static/media/add.0bbf1711.svg\";","export default __webpack_public_path__ + \"static/media/clear.4ac10f93.svg\";","import React, { useState, useRef, useEffect} from 'react'\r\nimport Button from \"../Button/Button\"\r\nimport addSvg from \"../../assets/add.svg\"\r\nimport clearSvg from \"../../assets/clear.svg\"\r\n\r\nconst AddForm = ({columnIndex, isEmptyPanel, addColumn, onAddCards}) => {//нижняя панель списка задач\r\n    const [showForm, setShowForm] = useState(false); //переключаем кнопки\r\n    const [text, setText]  = useState(\"\");\r\n    const textareaRef = useRef(); //наводим фокус на тест/инпут\r\n\r\n    useEffect( () => {\r\n       textareaRef.current && textareaRef.current.focus()\r\n      }, [showForm])\r\n\r\n      const onAdd = () => {\r\n        if (isEmptyPanel) {\r\n            onAddCards(columnIndex, text);\r\n        } else {\r\n            addColumn(text);\r\n        }\r\n        setText(\"\")\r\n        setShowForm(false)\r\n      };\r\n    return (\r\n        <section>\r\n            {showForm \r\n            ? \r\n            (<div className= 'add-form'>\r\n                <div className= 'add-form__input'   > \r\n                    <textarea ref={textareaRef}  rows=\"3\" onChange={ e => setText(e.target.value)} value={text}\r\n                            placeholder={ isEmptyPanel? \"Введите название карточки\": \"Введите название колонки\"}  >\r\n                    </textarea>   \r\n                    \r\n                    <div className= 'add-form__button' >\r\n                        <Button onAdd={onAdd} >\r\n                            {isEmptyPanel? \"Добавить карточку\": \" Добавить колонку\"} \r\n                        </Button>\r\n                        <img src={clearSvg} alt=\"clear svg icon\" className= 'add-form__button-clear'onClick={setShowForm.bind(this, false)}                         /> \r\n                    </div>\r\n\r\n                </div>\r\n            </div> )\r\n            :\r\n            ( <div className=\"panel__buttom\"  //кнопка добавить еще карточку\r\n                 onClick={setShowForm.bind(this, true)} >\r\n                <div className=\"panel__buttom-add-btn\" >\r\n                    <img  src={addSvg} alt=\"add svg icon\"/> \r\n                    <span    >   { isEmptyPanel? \" Добавить еще карточку\": \" Добавить еще колонку\"}  </span>\r\n                </div>\r\n               </div> \r\n            )}\r\n        </section>\r\n    );\r\n}\r\n  export default AddForm;","import React from 'react'\r\nimport Card from \"../card/Card\"\r\nimport {Droppable} from \"react-beautiful-dnd\"\r\nimport AddForm from \"../AddForm/AddForm\"\r\nimport clearSvg from \"../../assets/clear.svg\";\r\n\r\n//компонентная панель отрисовывает ЗАГОЛОВКИ И КАРТОЧКИ\r\nconst Panel = (  {columnIndex, title, cards, addColumn, AddCards, removeColumn} ) => {\r\n\r\n    return (\r\n        <div className= {`panel${!cards ? \" panel__empty\":\"\" }`}>\r\n            <div className=\"panel__title\" >  \r\n                <b> {title} </b>\r\n                { cards && <div className=\"column__remove\" onClick={ () => removeColumn(columnIndex) } > \r\n                        <img src={clearSvg} alt=\"Clear svg icon\" />\r\n                </div> }\r\n            </div>\r\n        \r\n            <Droppable droppableId={`${columnIndex}`} key={columnIndex}  >\r\n                { (provided) => {\r\n                    return(\r\n                        <div className=\"panel__items\" {...provided.droppableProps}\r\n                        ref={provided.innerRef}  >\r\n                            {cards &&\r\n                                cards.map( (card, index) => {\r\n                                    //console.log(\"Panel_pandel__items\",card)\r\n                                    return (\r\n                                            <Card key={index} cardIndex={index} columnIndex={columnIndex} >\r\n                                                {card} \r\n                                            </Card>\r\n                                            ) \r\n                                    })\r\n                            }\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )\r\n                }\r\n                }\r\n            </Droppable> \r\n\r\n            <AddForm isEmptyPanel={cards} addColumn={addColumn} onAddCards={AddCards} columnIndex={columnIndex} />\r\n        </div>\r\n    ) \r\n}\r\n\r\n  export default Panel;","import React from \"react\";\r\nimport {connect} from \"react-redux\";  //The connect() function connects a React component to a Redux store.\r\nimport Panel from \"../components/Panel/Panel.js\"\r\nimport {DragDropContext} from \"react-beautiful-dnd\"\r\nimport {addColumn, addCard, removeColumn, reorderCardsDel} from \"../reducers/actions.js\"\r\n\r\nconst Panels = ({Columns, addColumn, addCard, removeColumn, reorderCardsDel}) => {\r\n\r\n  const handleDragEnd = ({source, destination}) => {\r\n      console.log(\"from откудава\", source)\r\n      console.log(\"to направленье\", destination)\r\n    if (!destination) {\r\n      return\r\n    }\r\n    if (destination.index === source.index && destination.droppableId === source.droppableId) {\r\n      return\r\n    }\r\n    reorderCardsDel({ source, destination });\r\n  }\r\n\r\n    return (\r\n      <DragDropContext onDragEnd={ handleDragEnd } >\r\n          <section className=\"panels__container\">\r\n                  {Columns.map( (item, index) => {\r\n                      return (\r\n                              <Panel key={index} {...item} columnIndex={index} addColumn={addColumn} AddCards={addCard}  removeColumn={removeColumn} /> \r\n                      )\r\n                  })}\r\n              <Panel addColumn={addColumn} AddCards={addCard}  removeColumn={removeColumn} /> \r\n          </section>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    console.log(\"App__Panels_mapStateToProps\", state)\r\n    return {\r\n        Columns: state.Column\r\n    }\r\n  }\r\n\r\n    const mapDispatchToProps = dispatch => ({\r\n        addColumn: (name) => {\r\n            dispatch(  addColumn(name)  )\r\n          },\r\n\r\n        removeColumn: (index) => {\r\n            dispatch( removeColumn(index)  )\r\n          },\r\n        \r\n        addCard: (columnIndex, text) => {\r\n            dispatch(  addCard(columnIndex, text)   )\r\n          },\r\n\r\n        reorderCardsDel: ({ source, destination }) => {\r\n            dispatch(  reorderCardsDel({ source, destination })   )\r\n          },\r\n    })\r\n\r\n  export default connect (mapStateToProps, mapDispatchToProps) (Panels); \r\n"," \r\n  export let addColumn =  (name) => {\r\n    return (\r\n        {\r\n            type: \"COLUMNS:ADD\",\r\n            payload: name\r\n        }\r\n    )\r\n}\r\n    export let removeColumn =  (index) => (\r\n        {\r\n            type: \"COLUMNS:REMOVE\",\r\n            payload: index\r\n        }\r\n    )\r\n\r\n    export let addCard =  (columnIndex, text) => (\r\n        {\r\n            type: \"CARDS:ADD\",\r\n            payload: {\r\n                columnIndex,\r\n                text\r\n            }\r\n        }\r\n    )\r\n\r\n    export let reorderCardsDel = ({ source, destination }) => ({\r\n        type: \"CARDS:MOVE\",\r\n        payload: {\r\n          source,\r\n          destination\r\n        }\r\n      })\r\n","import Panels from \"./containers/Panels\"\n\nfunction App({}) {\n  \n  return (\n    <div className=\"app\">\n      <Panels/>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//стейт представляет собой массив панелей (объектов) в которых есть тайтл и массив карт. \r\n//РЕДЬЮСЕР\r\nconst initialState =[\r\n        {\r\n            title: \"План на месяц\",\r\n            cards: [\r\n               \"Достроить дом\",\r\n               \"Найти работу\",\r\n               \"Выучить английский\",\r\n               \"Сесть на шпагат\"\r\n              ]\r\n        },\r\n        {\r\n            title: \"План на день\",\r\n            cards: [\r\n               \"Выучить реакт\",\r\n               \"Заяняться спортом\",\r\n               \"Собрать шкаф\"]\r\n        }\r\n];\r\n\r\n const Columns = (state = initialState, action) => {\r\n   //debugger;\r\n  let removed = \"\"\r\n    switch(action.type){\r\n        case \"CARDS:ADD\":\r\n            return state.map((item, index) => {\r\n              if (action.payload.columnIndex === index) {\r\n                return {\r\n                  ...item,\r\n                  cards: [...item.cards, action.payload.text]\r\n                };\r\n              }\r\n              return item;\r\n            });\r\n\r\n        case \"COLUMNS:ADD\":\r\n            return [\r\n                ...state,\r\n                {\r\n                  title: action.payload,\r\n                  cards: []\r\n                }\r\n              ];\r\n        case \"COLUMNS:REMOVE\":\r\n            return state.filter((_, index) => action.payload !== index);\r\n        case \"CARDS:MOVE\": \r\n            return state.map((item, index) => {\r\n              if (String(index) === action.payload.source.droppableId) {\r\n                let cardsCopy = [...item.cards]\r\n                removed = cardsCopy.splice(action.payload.source.index, 1)[0]; //вырезали нужный элемент\r\n                item.cards = [...cardsCopy]  //вернули в айтем массив с вырезанным элементом\r\n\r\n                let TargetColumn = Number(action.payload.destination.droppableId) //место для записи в ДнД жестко закодированно\r\n                state[TargetColumn].cards.splice(action.payload.destination.index, 0, removed) \r\n                \r\n                return item\r\n              }\r\n\r\n              return item;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default Columns;","//combineReducers() позволяет объединить несколько редьюсеров в один.\r\nimport {combineReducers} from 'redux'\r\n//import Card from \"./cards.js\"\r\nimport Columns from \"./reducer.js\" //панель из редьюсера\r\n\r\nconst rootReducer = combineReducers ( {\r\n    Column: Columns//, Card: Card //дальше могли бы быть другие редьюсеры: Card2, Card3, Card4 ...\r\n})\r\n\r\nexport default rootReducer;","//Глобальное хранилище приложения\r\nimport {createStore} from 'redux'\r\nimport rootReducer from \"./reducers/RootReducer\"\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() ); \r\n\r\nconsole.log(store)\r\nconsole.log('Subscribe777', store.getState())\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/style.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './store.js'\n\nconst renderApp = (Component) => (\n        ReactDOM.render(\n          <Provider store={store}>\n            <Component />\n          </Provider>,\n          document.getElementById('root')\n        )  \n)\n\nrenderApp(App)\n\nreportWebVitals();\n"],"sourceRoot":""}